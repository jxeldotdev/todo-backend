apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "todo-backend.labels" . | nindent 4 }}
data:
  CORS_ALLOWED_ORIGINS: {{ .Values.config.corsAllowedOrigins | quote }}
  POSTGRES_DB: {{ .Values.config.postgresDB | quote }}
  POSTGRES_HOST: {{ .Values.config.postgresHost | quote }}
  nginx.conf: |-
    user nginx;

    # A single worker is enough for load balancing and reverse proxing.
    # While disk I/O can block an nginx worker, it's possible to enable
    # async read and send for static files.
    worker_processes 1;

    # The limit on the maximum number of open files for worker processes.
    # This overrides the OS limit for the user the workers run as:
    #   ulimit -a | grep 'open files'
    #
    # This value must be equal or higher than the worker_connections value.
    worker_rlimit_nofile 4096;

    # Log to stdout.
    # Use the stdout of init on Docker to get the logs to the log drain.
    error_log /proc/1/fd/1 warn;

    pid /var/run/nginx.pid;


    events {
        # The maximum number of simultaneous connections that can be
        # opened by a worker process. This limit is shared between
        # client connections and upstream connections.
        worker_connections 4096;

        # "on" if nginx worker_processes > 1
        accept_mutex off;
    }


    http {
        server_tokens off;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        log_format  main  '[nginx] method=$request_method path=$request_uri '
                        'status=$status upstream_status=$upstream_status duration=$request_time size=$body_bytes_sent '
                        '"$remote_user" "$http_referer" "$http_user_agent"';

        # Log to stdout.
        # Use the stdout of init on Docker to get the logs to the log drain.
        access_log /proc/1/fd/1 main;

        tcp_nodelay on;

        keepalive_timeout 20s; # default 75s
        gzip on;

        server {
            listen 80;

            location / {
                proxy_pass http://localhost:8080;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $host;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_redirect off;
            }
        }
    }
